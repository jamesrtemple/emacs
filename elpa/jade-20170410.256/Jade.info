This is Jade.info, produced by makeinfo version 5.2 from Jade.texi.

     Jade 0.3.3, Apr 06, 2017

     Nicolas Petton

     Copyright © 2017, Nicolas Petton

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Jade: (Jade.info). JavaScript development environment for Emacs.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.5.5.


File: Jade.info,  Node: Top,  Next: Table of contents,  Up: (dir)

Jade Documentation
******************

     Jade 0.3.3, Apr 06, 2017

     Nicolas Petton

     Copyright © 2017, Nicolas Petton

Jade is a JavaScript development environment for Emacs(1).

Jade connects to a browser tab or nodejs process and provides several
features for JavaScript development, including:

   * a REPL (with auto completion) & object inspection;

   * an inspector, with history and navigation;

   * a scratch buffer (‘M-x jade-scratch’);

   * JavaScript evaluation in JS buffers with ‘jade-interaction-mode’;

   * a stepping Debugger, similar to ‘edebug’, or ‘cider’.

* Menu:

* Table of contents:: 
* Indices and tables:: 

 — The Detailed Node Listing —

Table of contents

* Installation:: 
* Getting up and running:: 
* Interaction in JS buffers:: 

Installation

* Using MELPA:: 
* Manual installation:: 

Getting up and running

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 

Interaction in JS buffers

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 


   ---------- Footnotes ----------

   (1) http://gnu.org/software/emacs


File: Jade.info,  Node: Table of contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Table of contents
*******************

* Menu:

* Installation:: 
* Getting up and running:: 
* Interaction in JS buffers:: 


File: Jade.info,  Node: Installation,  Next: Getting up and running,  Up: Table of contents

1.1 Installation
================

Jade supports ‘Emacs 25.1+’, ‘Chrome 54.0+’ (debugging protocol ‘v1.2’)
and ‘NodeJS 7+’.

Jade is availabe on MELPA(1), MELPA Stable(2).

* Menu:

* Using MELPA:: 
* Manual installation:: 

   ---------- Footnotes ----------

   (1) https://melpa.org

   (2) https://stable.melpa/org


File: Jade.info,  Node: Using MELPA,  Next: Manual installation,  Up: Installation

1.1.1 Using MELPA
-----------------

Unless you are already using MELPA, you will have to setup ‘package.el’
to use MELPA or MELPA Stable repositories.  You can follow this
documentation(1).

You can install Jade with the following command:

     M-x package-install [RET] jade [RET]

or by adding this bit of Emacs Lisp code to your Emacs initialization
file (‘.emacs’ or ‘init.el’):

     (unless (package-installed-p 'jade)
       (package-install 'jade))

If the installation doesn’t work try refreshing the package list:

     M-x package-refresh-contents [RET]

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: Jade.info,  Node: Manual installation,  Prev: Using MELPA,  Up: Installation

1.1.2 Manual installation
-------------------------

If you want to install Jade manually, make sure to install
‘websocket.el’.  Obtain the code of Jade from the repository(1).

Add the following to your Emacs configuration:

     ;; load Jade from its source code
     (add-to-list 'load-path "~/projects/jade")
     (require 'jade)

   ---------- Footnotes ----------

   (1) https://github.com/NicolasPetton/jade


File: Jade.info,  Node: Getting up and running,  Next: Interaction in JS buffers,  Prev: Installation,  Up: Table of contents

1.2 Getting up and running
==========================

* Menu:

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 


File: Jade.info,  Node: NodeJS,  Next: Chrome/Chromium,  Up: Getting up and running

1.2.1 NodeJS
------------

Nodejs >= ‘7.0’ is required for Jade to work.

Start a node process with the ‘--inspect’ flag:

     node --inspect myfile.js

If you wish to break on the first line of the application code, start
node using:

     node --inspect --debug-brk myfile.js

Node will tell you to open an URL in Chrome:

     chrome-devtools://inspector.html?...&ws=127.0.0.1:PORT/PATH

Evaluate ‘M-x jade-connect-to-nodejs RET 127.0.0.1 RET PORT RET PATH’,
‘PORT’ and ‘PATH’ are the ones from the ‘ws’ parameter of the above URL.

Connecting Jade to the node process will open a debugger on the first
line of the application code if you passed the CLI argument
‘--debug-brk’.


File: Jade.info,  Node: Chrome/Chromium,  Next: Using local files when debugging,  Prev: NodeJS,  Up: Getting up and running

1.2.2 Chrome/Chromium
---------------------

Chrome/Chromium >= ‘54.0’ is required for Jade to properly work
(debugging protocol ‘v1.2’).

Start Chrome/Chromium with the ‘--remote-debugging-port’ flag like the
following:

     chromium --remote-debugging-port=9222 https://localhost:3000

Make sure that no instance of Chrome is already running, otherwise
Chrome will simply open a new tab on the existing Chrome instance, and
the ‘remote-debugging-port’ will not be set.

To connect to a tab, run from Emacs:

     M-x jade-connect-to-chrome


File: Jade.info,  Node: Using local files when debugging,  Prev: Chrome/Chromium,  Up: Getting up and running

1.2.3 Using local files when debugging
--------------------------------------

Jade can use local files when debugging, or to set breakpoints.

     Hint: When using ‘NodeJS’, or when the connected tab uses the
     ‘file://’ URL, Jade will by itself use local files from disk.  In
     this case there is nothing to setup.

If the Chrome connection uses the ‘http://’ or ‘https://’ protocol, you
will have to tell Jade where to find the corresponding JavaScript files
on disk by setting up a workspace.

To do that, place an empty ‘.jade’ marker file in the root folder where
your `web server serves static files'.

The ‘.jade’ file should not always be placed in the directory that
contains your JavaScript files.  It has to be in the root folder
containing static files.  Most of the time, it is at least one level
above.

Given the following project structure:

     project/ (current directory)
        www/
           index.html
           css/
              style.css
           js/
              app.js
           .jade

Jade will lookup the file ‘www/js/app.js’ for the URL
"‘http://localhost:3000/js/app.js’".

     Danger: In order for this setup to work, make sure to call
     ‘jade-connect-to-chrome’ from somewhere within the workspace
     directory!


File: Jade.info,  Node: Interaction in JS buffers,  Prev: Getting up and running,  Up: Table of contents

1.3 Interaction in JS buffers
=============================

Jade comes with a minor mode called ‘jade-interaction-mode’ for
interactive programming.  To enable it in all JavaScript buffers, add
something like the following to your Emacs configuration:

     (require 'jade)
     (add-hook 'js-mode-hook #'jade-interaction-mode)

When ‘jade-interaction-mode’ is on, you can evaluate code, inspect
objects and add or remove breakpoints from your buffers.

* Menu:

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 


File: Jade.info,  Node: Evaluating and inspecting,  Next: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.3.1 Evaluating and inspecting
-------------------------------

To evaluate the JavaScript expression preceding the point, press ‘C-x
C-e’.

To inspect the result of an expression, press ‘C-x M-i’.

The entire buffer can be evaluating with ‘M-x jade-eval-buffer’.


File: Jade.info,  Node: Switching to the REPL buffer,  Next: Adding and removing breakpoints,  Prev: Evaluating and inspecting,  Up: Interaction in JS buffers

1.3.2 Switching to the REPL buffer
----------------------------------

Press ‘C-c C-z’ from any buffer with ‘jade-interaction-mode’ turned on
to switch back to the REPL buffer.


File: Jade.info,  Node: Adding and removing breakpoints,  Prev: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.3.3 Adding and removing breakpoints
-------------------------------------

You need to first make sure that Jade is set up correctly to use local
files (see *note Using local files when debugging: e.).

   - ‘C-c b b’: Toggle a breakpoint

   - ‘C-u C-c b b’: Toggle a breakpoint with condition

   - ‘C-c b K’: Remove all breakpoints from the current buffer

     Note: Breakpoints are persistent: if the connection is closed, when
     a new connection is made Jade will attempt to add back all
     breakpoints.


File: Jade.info,  Node: Indices and tables,  Prev: Table of contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top324
Ref: index doc524
Ref: 0524
Ref: Top-Footnote-11512
Node: Table of contents1550
Ref: index welcome-to-jade-s-documentation1644
Ref: 11644
Ref: index table-of-contents1644
Ref: 21644
Node: Installation1772
Ref: installation installation1867
Ref: 31867
Ref: installation doc1867
Ref: 41867
Ref: Installation-Footnote-12144
Ref: Installation-Footnote-22170
Node: Using MELPA2203
Ref: installation using-melpa2289
Ref: 52289
Ref: Using MELPA-Footnote-12907
Node: Manual installation2951
Ref: installation manual-installation3037
Ref: 63037
Ref: Manual installation-Footnote-13412
Node: Getting up and running3458
Ref: setup doc3587
Ref: 73587
Ref: setup getting-up-and-running3587
Ref: 83587
Ref: setup up-and-running3587
Ref: 93587
Node: NodeJS3723
Ref: setup id13810
Ref: a3810
Ref: setup nodejs3810
Ref: b3810
Node: Chrome/Chromium4521
Ref: setup chrome4649
Ref: c4649
Ref: setup chrome-chromium4649
Ref: d4649
Node: Using local files when debugging5209
Ref: setup local-files5322
Ref: e5322
Ref: setup using-local-files-when-debugging5322
Ref: f5322
Node: Interaction in JS buffers6626
Ref: code-evaluation doc6734
Ref: 106734
Ref: code-evaluation interaction-in-js-buffers6734
Ref: 116734
Node: Evaluating and inspecting7309
Ref: code-evaluation evaluating-and-inspecting7431
Ref: 127431
Node: Switching to the REPL buffer7709
Ref: code-evaluation switching-to-the-repl-buffer7871
Ref: 137871
Node: Adding and removing breakpoints8057
Ref: code-evaluation adding-and-removing-breakpoints8185
Ref: 148185
Node: Indices and tables8715
Ref: index indices-and-tables8797
Ref: 158797

End Tag Table


Local Variables:
coding: utf-8
End:
